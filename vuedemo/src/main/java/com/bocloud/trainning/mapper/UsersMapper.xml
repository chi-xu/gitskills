<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC
        "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bocloud.trainning.mapper.UsersMapper">

    <resultMap id="getMap" type="Users">

        <id property="id" column="id"/>
        <result property="userId" column="userId"/>
        <result property="username" column="username"/>
        <result property="phone" column="phone"/>
        <result property="address" column="address"/>
        <result property="password" column="password"/>
        <result property="employDate" column="employ_date"/>
        <result property="parentId" column="parentId"/>
        <result property="email" column="email"/>
        <result property="salary" column="salary"/>
        <result property="gender" column="gender"/>
        <result property="birthday" column="birthday"/>
        <result property="level" column="level"/>
        <result property="departmentId" column="departmentId"/>
        <result property="postId" column="postId"/>
        <result property="roleId" column="roleId"/>
        <result property="companyId" column="companyId"/>
		<association property="department" column="departmentId" javaType="Department">
			<id property="id" column="id"/>
			<result property="dname" column="dname" />
		</association>
		<association property="post" column="postId" javaType="Post">
			<id property="id" column="id"/>
			<result property="pname" column="pname" />
		</association>
		<association property="role" column="roleId" javaType="Role">
			<id property="id" column="id"/>
			<result property="rname" column="rname" />
		</association>
		<association property="company" column="companyId" javaType="Company">
			<id property="id" column="id"/>
			<result property="cname" column="cname" />
		</association>

    </resultMap>
    <select id="login" parameterType="Users" resultMap="getMap">
        select id,userId,username,password from users where username=#{username}

    </select>
    
   
    
   <!--  查询总记录数 -->
    <select id="selCount" parameterType="Users" resultType="Integer">
    	select count(*) from users
    	<!-- 根据查询的值，动态的拼接where条件 -->
	 		<where>
	 		    <!-- username有值，就拼接sql查询 -->
	 			<if test="username != null and username !='' ">
	 				username like concat('%',#{username},'%')
	 			</if>
	 			<if test="userId != null and userId != '' ">
	 				and	userId like concat('%',#{userId},'%')
	 			</if>
	 			
	 		</where>
    	
    </select>
    
    <!-- 判断用户工号是否存在 -->
     <select id="queryCount" parameterType="String" resultType="Integer">
    	select count(*) from users where userId=#{userId}
    	
    </select>
    
    
    <!-- 模糊查询 -->
    <select id="fuzzyQuery" parameterType="Users" resultMap="getMap">
    	select  u.id,u.userId,u.username,u.phone,u.email,u.birthday,u.employ_date,u.gender,u.status,ur.username,c.cname,p.pname,r.rname,d.dname from users u
  		left join company c on c.id=u.companyId
		left join post p on p.id = u.postId
		left join role r on r.id = u.roleId 
		left join department d on d.id =u.departmentId
		left join users ur on u.parentId = ur.userId 
    	<!-- 根据查询的值，动态的拼接where条件 -->
	 		<where>
	 		    <!-- username有值，就拼接sql查询 -->
	 			<if test="username != null and username !='' ">
	 				u.username like concat('%',#{username},'%')
	 			</if>
	 			<if test="userId != null and userId != '' ">
	 				and	u.userId like concat('%',#{userId},'%')
	 			</if>
	 			
	 		</where>
	 		
    </select>
    
    
    <!-- 删除用户 -->
    <select id="del"  parameterType="String" >
    	delete from users where userId=#{userId}
    </select>
    
    
   <!--  返回直属上级信息 -->
    <select id="parentList" parameterType="Users" resultMap="getMap">
		select id,userId,username from users 
		<where>
			<if test="userId != null and userId != ''">
				userId != #{userId}
			</if>
			<if test="username != null and username !='' ">
	 			and	u.username like concat('%',#{username},'%')
	 		</if>
		</where>
		
		
    </select>
    
    <!-- 新增用户 -->
    <insert id="add" parameterType="Users" >
    	insert into users(userId,username,gender,departmentId,parentId,phone,email,birthday,employ_date,companyId,level,postId,salary)
    	values(#{userId},#{username},#{gender},#{departmentId},#{parentId},#{phone},#{email},#{birthday},#{employDate},#{companyId},#{level},#{postId},#{salary})
    </insert>
    
    <!-- 根据用户id查询用户个人信息 -->
    <select id="queryById" parameterType="String" resultMap="getMap">
    	<!-- select  u.id,u.userId,u.username,u.phone,u.email,u.birthday,u.employ_date,u.gender,u.status,u.parentId,ur.username,c.cname,p.pname,r.rname,d.dname,u.salary from users u
  		left join company c on c.id=u.companyId
		left join post p on p.id = u.postId
		left join role r on r.id = u.roleId 
		left join department d on d.id =u.departmentId
		left join users ur on u.parentId = ur.userId 
		where u.userId=#{userId} -->
		select  u.*,ur.username as upname,c.cname,p.pname,r.rname,d.dname from users u
  		left join company c on c.id=u.companyId
		left join post p on p.id = u.postId
		left join role r on r.id = u.roleId 
		left join department d on d.id =u.departmentId
		left join users ur on u.parentId = ur.userId 
		where u.userId=#{userId}
    </select>
    
    <!-- 修改 -->
	<update id="update" parameterType="Users">
		update users set userId=#{userId},username=#{username},gender=#{gender},departmentId=#{departmentId},parentId=#{parentId},phone=#{phone},email=#{email},birthday=#{birthday},
		             employ_date=#{employDate},companyId=#{companyId},level=#{level},postId=#{postId},salary=#{salary}    
		where id=#{id}
	</update> 
	
	<update id="updRole" parameterType="Users">
		update users set roleId=#{roleId}
		where userId=#{userId}
	</update>
    
    
    
    
    
    
    

</mapper>